<launch>
    <param name="/use_sim_time" value="true" />

    <!-- configuring CLI arguments -->
    <arg name="robot" default="choo_2" />
    <arg name="robot_desc" default="$(find agv_model)/$(arg robot)/model.urdf.xacro" />
    <arg name="world" default="empty_world"/>
    <arg name="gazebo" default="false" />   <!-- launch the full Gazebo gui window (resource intensive)-->
    <arg name="slam" default="true" />
    <arg name="debug" default="false" />
    <arg name="no_costmap_2d" default="false" />
    <arg name="rviz" default="true"/>
    <arg name="rviz_cfg" default="$(find agv_sim)/rviz/config.rviz"/>

    <arg name="sim_pos_X" default="0.0" />
    <arg name="sim_pos_Y" default="0.0" />
    <arg name="sim_pos_Z" default="0.5" />

    <!-- launching gazebo_ros, which is just gazebo with ros integrated -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find agv_sim)/worlds/$(arg world).world"/> 
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg gazebo)"/>
        <arg name="recording" value="false"/> 
        <arg name="debug" value="false"/>
        <arg name="verbose" value="true"/>
    </include>

    
    <!-- load robot description to parameter server (for robot_state_publisher) -->
    <param name="robot_description" command="$(find xacro)/xacro $(arg robot_desc)" />

    <!-- spawn our model in gazebo by building urdf from xacro -->
    <group if="$(eval arg('world') == 'course')">
        <node pkg="gazebo_ros" type="spawn_model" name="spawn_$(arg robot)"
            args="-param robot_description -urdf -model $(arg robot)
                -x -34.0 -y 18.5 -z 0.0 -Y 2.168162" respawn="false"/>
    </group>
    <group if="$(eval arg('world') != 'course')">
        <node pkg="gazebo_ros" type="spawn_model" name="spawn_$(arg robot)"
            args="-param robot_description -urdf -model $(arg robot)
                -x $(arg sim_pos_X) -y $(arg sim_pos_X) -z $(arg sim_pos_X)" respawn="false"/>
    </group>

    <!-- use robot description to publish robot tf tree -->
    <!-- tf_prefix: robot tf transforms are prepended with bowser2 to match model.sdf plugin convention-->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <param name="tf_prefix" type="string" value=""/>
    </node>

    <!-- <rosparam command="load" file="$(find ugv_nav)/config/waypoints.yaml" /> -->
    
    <!-- publishes tf transforms between joints -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

    <!-- launches rviz with specified configuration (if CLI arg is true)-->
    <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_cfg)"/>

    <!-- Launches our nav package -->
    <include file="$(find agv_nav)/launch/nav.launch" />

</launch>

