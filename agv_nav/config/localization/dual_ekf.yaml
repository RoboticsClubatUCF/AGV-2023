ekf_odom:
  frequency: 30
  silent_tf_failure: false
  sensor_timeout: 3
  two_d_mode: true
  transform_time_offset: 0.0
  transform_timeout: 0.0
  print_diagnostics: true

  # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
  # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
  # effects on the performance of the node. Defaults to false if unspecified.
  debug: false

  publish_tf: true
  publish_acceleration: true
  permit_corrected_publication: false

  # REP-105 (http://www.ros.org/reps/rep-0105.html) specifies four principal coordinate frames: base_link, odom, map, and
  # earth. base_link is the coordinate frame that is affixed to the robot. Both odom and map are world-fixed frames.
  # The robot's position in the odom frame will drift over time, but is accurate in the short term and should be
  # continuous. The odom frame is therefore the best frame for executing local motion plans. The map frame, like the odom
  # frame, is a world-fixed coordinate frame, and while it contains the most globally accurate position estimate for your
  # robot, it is subject to discrete jumps, e.g., due to the fusion of GPS data or a correction from a map-based
  # localization node. The earth frame is used to relate multiple map frames by giving them a common reference frame.
  # ekf_localization_node and ukf_localization_node are not concerned with the earth frame.
  # Here is how to use the following settings:
  # 1. Set the map_frame, odom_frame, and base_link frames to the appropriate frame names for your system.
  #     1a. If your system does not have a map_frame, just remove it, and make sure "world_frame" is set to the value of
  #         odom_frame.
  # 2. If you are fusing continuous position data such as wheel encoder odometry, visual odometry, or IMU data, set
  #   "world_frame" to your odom_frame value. This is the default behavior for robot_localization's state estimation nodes.
  # 3. If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position updates
  # from landmark observations) then:
  #     3a. Set your "world_frame" to your map_frame value
  #     3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be another state
  #         estimation node from robot_localization! However, that instance should *not* fuse the global data.
  map_frame: map              # Defaults to "map" if unspecified
  odom_frame: odom          # Defaults to "odom" if unspecified
  base_link_frame: base_link  # Defaults to "base_link" if unspecified
  world_frame: odom          # Defaults to the value of odom_frame if unspecified

  # [ x, y, z,
  #   roll, pitch, yaw,
  #   vx, vy, vz,
  #   vroll, vpitch, vyaw,
  #   ax, ay, az]

  imu0: vectornav/IMU
  imu0_config: [ false, false, false,
                true, true, true,
                false, false, false,
                false, false, true,
                true, false, false]

  odom0: choo_2/odom
  odom0_config: [false, false, false,
                true, true, true,
                true, true, true,
                false, false, true,
                false, false, false]


  # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
  # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
  imu0_remove_gravitational_acceleration: true

  # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
  # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
  # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
  # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
  # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
  # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
  # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
  # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
  # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
  # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
  # inputs, the control term will be ignored.
  # Whether or not we use the control input during predicition. Defaults to false.
  use_control: false

ekf_map:
  frequency: 30
  silent_tf_failure: false
  sensor_timeout: 3
  two_d_mode: true
  transform_time_offset: 0.0
  transform_timeout: 0.0
  print_diagnostics: true

  # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
  # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
  # effects on the performance of the node. Defaults to false if unspecified.
  debug: false

  publish_tf: true
  publish_acceleration: true
  permit_corrected_publication: false

  # REP-105 (http://www.ros.org/reps/rep-0105.html) specifies four principal coordinate frames: base_link, odom, map, and
  # earth. base_link is the coordinate frame that is affixed to the robot. Both odom and map are world-fixed frames.
  # The robot's position in the odom frame will drift over time, but is accurate in the short term and should be
  # continuous. The odom frame is therefore the best frame for executing local motion plans. The map frame, like the odom
  # frame, is a world-fixed coordinate frame, and while it contains the most globally accurate position estimate for your
  # robot, it is subject to discrete jumps, e.g., due to the fusion of GPS data or a correction from a map-based
  # localization node. The earth frame is used to relate multiple map frames by giving them a common reference frame.
  # ekf_localization_node and ukf_localization_node are not concerned with the earth frame.
  # Here is how to use the following settings:
  # 1. Set the map_frame, odom_frame, and base_link frames to the appropriate frame names for your system.
  #     1a. If your system does not have a map_frame, just remove it, and make sure "world_frame" is set to the value of
  #         odom_frame.
  # 2. If you are fusing continuous position data such as wheel encoder odometry, visual odometry, or IMU data, set
  #   "world_frame" to your odom_frame value. This is the default behavior for robot_localization's state estimation nodes.
  # 3. If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position updates
  # from landmark observations) then:
  #     3a. Set your "world_frame" to your map_frame value
  #     3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be another state
  #         estimation node from robot_localization! However, that instance should *not* fuse the global data.
  map_frame: map              # Defaults to "map" if unspecified
  odom_frame: odom          # Defaults to "odom" if unspecified
  base_link_frame: base_link  # Defaults to "base_link" if unspecified
  world_frame: map          # Defaults to the value of odom_frame if unspecified

  # [ x, y, z,
  #   roll, pitch, yaw,
  #   vx, vy, vz,
  #   vroll, vpitch, vyaw,
  #   ax, ay, az]

  imu0: vectornav/IMU
  imu0_config: [ false, false, false,
                true, true, true,
                false, false, false,
                false, false, true,
                true, false, false]

  odom0: /odometry/gps
  odom0_config: [true,  true,  false,
                 false, false, false,
                 false, false, false,
                 false, false, false,
                 false, false, false]
  odom0_queue_size: 10
  odom0_nodelay: true
  odom0_differential: false
  odom0_relative: false


  # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
  # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
  imu0_remove_gravitational_acceleration: true

  # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
  # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
  # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
  # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
  # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
  # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
  # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
  # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
  # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
  # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
  # inputs, the control term will be ignored.
  # Whether or not we use the control input during predicition. Defaults to false.
  use_control: true

navsat_transform:
  frequency: 30
  delay: 3.0
  magnetic_declination_radians: 0.043109  # For lat/long 49.9, 8.89
  yaw_offset: 1.570796327  # IMU reads 0 facing magnetic north, not east
  zero_altitude: false
  broadcast_cartesian_transform: true
  publish_filtered_gps: true
  use_odometry_yaw: false
  wait_for_datum: false